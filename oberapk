#!/bin/bash
#
# 2018/08/30 Gabriel Moreau <Gabriel.Moreau@univ-grenoble-alpes.fr>
# 2022/01/27 Gabriel Moreau : modulate
#
# oberapk
#
## Binaries: id su cat grep cut sed cut sort paste reprepro

export PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin
export LANG=C

VERSION='0.5.36'

# Global variables
export CONF_FILE=/etc/oberapk/oberapk.conf
if [ -e "$HOME/.config/oberapk/oberapk.conf" ]
then
   CONF_FILE=$HOME/.config/oberapk/oberapk.conf
fi
export PAKAJ_FOLDER=/usr/lib/oberapk/pakaj.d
export REPREPRO=/var/www/debian
if [ -e '/etc/oberapk/oberapk.sh' ]
then
   source /etc/oberapk/oberapk.sh
fi
if [ -e "$HOME/.config/oberapk/oberapk.sh" ]
then
   source "$HOME/.config/oberapk/oberapk.sh"
fi

# Not run as root
if [ $(id --user) -eq 0 ]
then
   if [[ -n "${RUN_USER}" && $(id --user "${RUN_USER}" 2> /dev/null) -gt 0 ]]
   then
      exec su - "${RUN_USER}" --command "$0 $*"
   fi
   echo 'Error: do not run oberapk as user root'
   echo ''
   usage
   exit 1
fi

################################################################
# cmd: grep cut sort sed cat

# breton / francais  / english
# -------------------------------
# ober   / contruire / make
# pakaj  / emballage / packaging
# stroll / ensemble  / kit

function usage() {
   cat <<END_USAGE
NAME
 oberapk - generate package

SYNOPSIS
 oberapk help
 oberapk avail
 oberapk list
 oberapk kit
 oberapk update pkg
 oberapk upgrade kit
 oberapk pushed pkg
 oberapk source pkg
 oberapk binaries

AUTHOR
 Gabriel Moreau <Gabriel.Moreau@univ-grenoble-alpes.fr>

COPYRIGHT
 Copyright (C) 2017-2024, LEGI UMR 5519 / CNRS UGA G-INP, Grenoble, France
 Licence : GNU GPL version 2 or later
END_USAGE
   }

################################################################

function get_pakaj () {
   kit=$1
   echo "${kit}" | egrep -q '^[[:alpha:]][[:alpha:][:digit:]-]*$' || return
   while read pakaj
   do
      if echo "${pakaj}" | grep -q "^@"
      then
         get_pakaj "${pakaj/@}"
      else
         echo "${pakaj}" | egrep '^[[:alpha:]][[:alpha:][:digit:]-]*$'
      fi
   done < <(grep "^@${kit}:" ${CONF_FILE} | cut -f 2- -d ':' | sed -e 's/ /\n/g;' | grep .) | sort -uR
   }

################################################################

function cmd_avail () {
   for pakaj in ${PAKAJ_FOLDER}/*.sh
   do
      source ${pakaj}
   done

   set | egrep '^oberpakaj_.*[[:space:]]()$' | cut -f 2- -d '_' | cut -f 1 -d ' ' | sed -e 's/_/-/g;' | egrep '^[[:alpha:]][[:alpha:][:digit:]-]*$' | sort -u
   }

################################################################

function cmd_list () {
   while read pakaj
   do
      if [ -e "${PAKAJ_FOLDER}/${pakaj}.sh" ]
      then
         echo "${pakaj}"
      else
         echo "${pakaj} # Error: no component"
      fi
   done < <(egrep "^[[:alpha:]][[:alpha:][:digit:]-]*:[[:digit:]]*:" ${CONF_FILE} | cut -f 1 -d ':' | sort -u)
   }

################################################################

function cmd_kit () {
   egrep "^@[[:alpha:]][[:alpha:][:digit:]-]*: " ${CONF_FILE} | cut -f 1 -d ':' | sed -e 's/^@//;' | grep . | sort -u
   }

################################################################

function cmd_update () {
   pakaj=$1

   if [ ! -e "${PAKAJ_FOLDER}/${pakaj}.sh" ]
   then
      echo "Error: no component ${pakaj}"
      exit 2
   fi

   # Conf file parameter by pakaj
   keep=$(grep "^${pakaj}:" ${CONF_FILE} | cut -f 2 -d ':')
   distrib=$(grep "^${pakaj}:" ${CONF_FILE} | cut -f 3- -d ':')
   if [ "${keep}" = '' ]
   then
      keep=3
   fi
   if ! echo "${keep}" | grep -q '^[[:digit:]]*$'
   then
      keep=3
   fi

   source ${PAKAJ_FOLDER}/${pakaj}.sh
   pakaj_code=$(echo "oberpakaj_${pakaj}" | sed -e 's/-/_/g;')

   # Launch bash function
   ${pakaj_code} ${keep} ${distrib}
   }

################################################################

function cmd_pushed () {
   pakaj=$1

   regex=$((echo ${pakaj}; egrep '^##[[:space:]](Pakaj|Package):' "${PAKAJ_FOLDER}/${pakaj}.sh" 2> /dev/null | cut -f 2 -d ':') | sed 's/[[:space:]]/\n/g;' | sort -u | grep . | paste -sd '|')

   ( cd ${REPREPRO} ; reprepro dumpreferences ) 2> /dev/null | egrep "/(${regex})[_-].*.deb"
   }

################################################################

function cmd_source () {
   pakaj=$1

   if [ ! -e "${PAKAJ_FOLDER}/${pakaj}.sh" ]
   then
      echo "# Error: no component ${pakaj}"
      exit 2
   fi

   echo "# eval this result"
   echo "export REPREPRO='${REPREPRO}';"
   echo "source ${PAKAJ_FOLDER}/${pakaj}.sh;"
   }

################################################################

function cmd_remove () {
   pakaj=$1

   pushed=$(oberapk pushed ${pakaj})
   version=$(echo "${pushed}" | cut -f 2 -d '_' | sort -V  | tail -1)

   while read distcpu pool eol
   do
      dist=$(echo ${distcpu} | cut -f 1 -d '|')
      package=$(basename ${pool})
      echo "( cd ${REPREPRO} ; reprepro remove ${dist} ${pakaj} )"
   done < <(echo "${pushed}" | grep "/${pakaj}/${pakaj}_${version}_") | sort -u
   }

################################################################

case $1 in
   avail)
      cmd_avail
      exit
      ;;

   list)
      cmd_list
      exit
      ;;

   kit)
      cmd_kit
      exit
      ;;

   source)
      pakaj=$2
      cmd_source ${pakaj}
      exit
      ;;

   update)
      pakaj=$2
      cmd_update ${pakaj}
      exit
      ;;

   pushed)
      pakaj=$2
      cmd_pushed ${pakaj}
      exit
      ;;

   remove)
      pakaj=$2
      cmd_remove ${pakaj}
      exit
      ;;

   upgrade)
      kit=$2
      for pakaj in $(get_pakaj "${kit}")
      do
         echo ''
         echo "Info: begin update package ${pakaj}"
         oberapk update ${pakaj}
      done
      exit
      ;;

   binaries)
      grep -h '^## Binaries:' $0 ${PAKAJ_FOLDER}/*.sh | cut -f 2 -d ':' | sed 's/\s/\n/g;' | sort -u | grep . | paste -sd ' '
      exit
      ;;

   version)
      echo "VERSION ${VERSION}"
      exit
      ;;

   help|*)
      usage
      exit
      ;;
esac

# No Command
usage
exit


################################################################
# Documentation in POD format (like Perl)
################################################################

=head1 NAME

oberapk - automated Debian package download, modification and local upload

=head1 SYNOPSIS

 oberapk avail
 oberapk list
 oberapk kit
 oberapk update pkg
 oberapk upgrade kit
 oberapk pushed pkg
 oberapk remove pkg
 oberapk source pkg
 oberapk binaries
 oberapk version
 oberapk help

=head1 DESCRIPTION

Oberapk is a tool to automate the uploading of Debian packages
to a local Reprepro repository.
The goal is to simplify the provision of software on a local park
without having them fetch the packages on remote sites.
For each package, there is a specific recipe to get the latest version,
if any, and then push it to the right Debian distribution(s)
that your Reprepro instance manages locally.

It is however possible to slightly modify the package during the recipe,
or to build very simple packages in which the programs are written
in scripting languages that do not need to be compiled
or complex build steps.

=head1 COMMANDS

=head2 avail

The `avail` command allows you to know all the available packaging
in the Oberapk distribution.

 oberapk avail

=head2 list

The `list` command allows you to know all the configure packaging
defined  in your configuration file..

 oberapk list

=head2 kit

The `kit` command lets you know the packaging set
defined in your configuration file.

 oberapk kit

=head2 update

The `update` command is used to start a recipe, and thus ultimately
to update the packages that this packaging manages.

 oberapk update pkg

=head2 upgrade

The `upgrade` command allows to apply all the packaging defined
by a `kit`.
If a kit `all` exists on your installation, then you can update
with a single command the software of your local repository
which are managed by Oberapk.

 oberapk upgrade kit

=head2 pushed

The `pushed` command lists all versions of the packages in this packaging
that are already in the Reprepro package manager.
These are the packages that are in practice available to end users

 oberapk pushed pkg

=head2 remove

The `remove` command remove the last version of the package in the
Reprepro package manager.
It is then possible to push it again via the `update` command.
In a normal life, you do not need to use this command.

 oberapk remove pkg | bash

For security, you have to pipe bash the output to really remove the package.

=head2 source

The `source` command is for developers. It allows to test a new recipe.
It allows to set the global variables useful for the bash function. 

 oberapk source pkg

=head2 binaries

The `binaries` command is for developers.
It allows to list all the commands that have been used
in the other recipes.
It is preferable if possible to restrict yourself to these commands
in order not to add any additional dependency to Oberapk. 

 oberapk binaries

=head2 version

The `version` command returns the current version installed
on the computer.

 oberapk version

=head2 help

The `help` command provides a little minimal help.

 oberapk help


=head1 SEE ALSO

L<reprepro|https://wiki.debian.org/DebianRepository/SetupWithReprepro>

Own project ressources:

=over

=item * L<Web site|https://gricad-gitlab.univ-grenoble-alpes.fr/legi/soft/trokata/oberapk>

=item * L<Online Manual|https://legi.gricad-pages.univ-grenoble-alpes.fr/soft/trokata/oberapk/>

=item * L<Download package (Debian)|https://legi.gricad-pages.univ-grenoble-alpes.fr/soft/trokata/oberapk/download/>

=back


=head1 AUTHORS

Written by Gabriel Moreau <Gabriel.Moreau@univ-grenoble-alpes.fr>, Grenoble - France


=head1 COPYRIGHT

Copyright (C) 2017-2024, LEGI UMR 5519 / CNRS UGA G-INP, Grenoble, France

Licence: GNU GPL version 2 or later
